name: CI Pipeline

on:
  push:
    branches:
      - main
      - preprod
      - uat
  workflow_dispatch:

#env:
#  ANDROID_COMPILE_SDK: "33"
#  ANDROID_BUILD_TOOLS: "33.0.2"
#  ANDROID_SDK_TOOLS: "9477386"

jobs:
  setup-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out branch
        uses: actions/checkout@v3

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

#      - name: Setup Android SDK
#        uses: android-actions/setup-android@v3
#        with:
#          cmdline-tools-version: 9477386

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

  build-uat:
    runs-on: ubuntu-latest
    needs: setup-android
    if: github.ref == 'refs/heads/uat'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build UAT
        run: ./gradlew assembleUat
      - name: Store APK
        run: mkdir -p artifact_output && mv app/build/outputs/apk/uat/*.apk artifact_output
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: uat-apk
          path: artifact_output/*.apk

  build-preprod:
    runs-on: ubuntu-latest
    needs: setup-android
    if: github.ref == 'refs/heads/preprod'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build PreProd
        run: ./gradlew assemblePreprod
      - name: Store APK
        run: mkdir -p artifact_output && mv app/build/outputs/apk/preprod/*.apk artifact_output
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: preprod-apk
          path: artifact_output/*.apk

  build-release:
    runs-on: ubuntu-latest
    needs: setup-android
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Release
        run: ./gradlew assembleRelease
      - name: Store APK
        run: mkdir -p artifact_output && mv app/build/outputs/apk/release/*.apk artifact_output
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: artifact_output/*.apk

  deploy-uat:
    runs-on: ubuntu-latest
    needs: build-uat
    if: github.ref == 'refs/heads/uat'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: uat-apk
          path: artifact_output
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Deploy to Firebase
        run: |
          APK_PATH=$(find artifact_output/ -name "*.apk" -print -quit)
          if [ -f "$APK_PATH" ]; then firebase appdistribution:distribute "$APK_PATH" --app ${{ secrets.FIREBASE_APP_ID_UAT }} --release-notes "UAT Release" --groups "pthws-test" --token "${{ secrets.FIREBASE_TOKEN }}"; fi

  deploy-preprod:
    runs-on: ubuntu-latest
    needs: build-preprod
    if: github.ref == 'refs/heads/preprod'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: preprod-apk
          path: artifact_output
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Deploy to Firebase
        run: |
          APK_PATH=$(find artifact_output/ -name "*.apk" -print -quit)
          if [ -f "$APK_PATH" ]; then firebase appdistribution:distribute "$APK_PATH" --app ${{ secrets.FIREBASE_APP_ID_PREPROD }} --release-notes "PreProd Release" --groups "pthws-test" --token "${{ secrets.FIREBASE_TOKEN }}"; fi

  deploy-release:
    runs-on: ubuntu-latest
    needs: build-release
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: release-apk
          path: artifact_output
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Deploy to Firebase
        run: |
          APK_PATH=$(find artifact_output/ -name "*.apk" -print -quit)
          if [ -f "$APK_PATH" ]; then firebase appdistribution:distribute "$APK_PATH" --app ${{ secrets.FIREBASE_APP_ID_RELEASE }} --release-notes "Production Release" --groups "pthws-test" --token "${{ secrets.FIREBASE_TOKEN }}"; fi
